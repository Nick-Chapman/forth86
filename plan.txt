
Words to implement.

Where possible in forth. Pushing just the real core primitives to asm.

----------------------------------------------------------------------
First off: List everything in _Starting forth_. Not using UPPERCASE; too shouty.
See many numeric words which I am not interested in. Also many "2" and "c" (char) versions of ops which can wait. Also, editor/buffer stuff is out of scope for me.


Chapter 1 (fundermental)
: xxx yyy ;
cr
spaces
space
emit
." xxx"
+
.

Chapter 2 (getting results)
+
-
*
/
/mod
mod
swap
dup
over
rot
drop
2swap
2dup
2over
2drop

Chapter 3 (editor)
use xxx
using xxx
list
load
( xxx)
update
empty-buffers
block
include xxx
forget xxx
marker xxx

Chapter 4 (decisions)
if
=
<>
<
>U<
U>
0=
0<
0>
and
or
?dup
abort" xx"

Chapter 5 (fixed point)
1+
1-
2+
2-
2*
2/
abs
negate
min
max
>r
r>
r@
*/
*/mod

Chapter 6 (loops)
do
loop
+loop
leave
begin
until
while
repeat
again
u.r
page
quit

Chapter 7 (numbers)
u.
um*
um/mod
u<
hex
octal
decimal
<#
#
#s
hold
sign
#>
d.
d.r
d+
d-
dnegate
dmax
dmin
d=
d0=
d<
du<
m+
sm/rem
fm/mod
m*
m*/

Chapter 8 (variables, constants, arrays)
variable xxx
!
@
?
+!
constant xxx
2variable
2constant
2!
2@
fill
erase
c!
c@

Chapter 9 (under the hood)
' xxx
[']
exit
quit
here
pad
sp@
s0
tib
#tib
base
h
>in

Chapter 10 (IO)
type
-trailing
cmove
cmove>
move
key
accept
word
>number
count
compare


Chapter 11 (extending compiler)
does>
immediate
postpone xxx
literal
[
]

----------------------------------------------------------------------
Now lets make a reduced list of words I hope to tackle.
And classify.


Input
    key (but not until I have char support)
    word

Output
    cr
    spaces
    space
    emit
    .

Numerics
    +
    -
    *
    /
    /mod
    mod
    1+
    1-
    abs
    negate
    min
    max

Boolean
    =
    <>
    <
    0=
    0<
    0>
    and
    or
    invert (jones)

Stack-twiddling
    swap
    dup
    over
    rot
    drop

Dictionary
    : xxx yyy ;
    create
    variable xxx
    constant xxx

Compiling, control-flow
    if
    then
    else
    do
    loop
    literal
    [
    ]
    branch
    0branch
    state (jones)
    ;

Dictionary/Heap
    latest (jones)
    here
    h (variable containing here pointer? - also known as cp?)
    !
    @
    ?
    +!
    fill
    erase
    cell
    cells
    allot (shifts h?)

    : ,   here ! cell allot ; (from chapter 9)

Execution tokens
    ' xxx
    [']
    execute
    find (jones)
    >cfa (jones)

Internal state
    sp@
    s0

Return Stack
    >r
    r>
    r@

Misc:
    ( xxx)   ( comments! )
    immediate
    ?dup
    abort" xx"
    page
    exit
    quit
    does>
    postpone xxx
    hidden (jones)
    char (jones)
    lit (jones)

String
    ." xxx"

----------------------------------------------------------------------
Wed Aug 23 2023

parse buffer - making interactive use more fun

.s

hidden words

check: if, then
do loop -- make F example work using original code

fix "create"
recode varable to use create
move "constant" back into asm
(stop using my current def of ['] which is not right)
make sure have correct def for literal

create X
X here expect

: variable create 0 , ;
: constant create , does> @ ;

>r r>

postpone, does>

make asm interpreter and colon-compiler more forthy.
separate number factor
unify with state flag
allowing defintion of [ and ]
move towards real forth defintion

qemu -- start maximized -- but how?
is it possible to quit qemu from inside forth?

----------------------------------------------------------------------
Wed Aug 23 20:56:03 2023

null terminated strings
access to name of latest word
expose print-string

unimplemented standard words

strings (null terminated) for messages
