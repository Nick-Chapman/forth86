
Status:

Recoded the forth (outer) interpreter in forth.

Done:
- cleanup Makefile
- just forth in sub dir
- "mem" memory usage reporting (need expose sp address)
- assemble time size reporting
- reorder asm: builtin words at end, so contiguous with run time words
- reorder asm: embedded text just before builtin words (idea: slide to recover space)
- support () comments in forth -- (need key)
- string support: ." s" (need key)
- "type" - the name of the standard forth word to print a string
- find should return an XT (not an entry - 3 bytes to left)
- interpreter: check dict before number? allow numbers to be re-defined !
- colon interpreter in forth
- improve dump.f for standard words see/dump
- recode "words" in forth
- ".s" - non destructive show of stack (need to know stack base)
- parse buffer - can this be coded in forth? (need backspace detection!) - YES, done
- doc status of all core words. implement some low hanging fruit
- decide unimplemented.f is pointless
- end colon defs with ret, not exit. for unified imp of see.
- start examples.f for fact, fib etc
- collatz example
- see entire dictionary (but needs pagination)
- return stack manipulation (>r r>) and use to define rot in forth
- ." in terms of .s -- think I now know how!
- .." to work in interpreter mode -- use to show Loading messages
- paginated mem dump -- ascii and xxd style
- imp relative branch0 offsets (nicer to see & future code relocation will be easier)
- debug/fix problem with .s when used in buffered-key ok message
- bye: is it possible to quit qemu from inside forth? - YES
- allow words to be marked as hidden
- (strip functionality of asm intepreter/colon-compiler: de-support numbers, immediate)
- bootstrap from simplest word-find-execute loop
- finally killed ASM def of colon compiler
- support [ and ] to switch compiler/interpreter without being state-aware!
- big cleanup of ASM file
- recode number? in forth (and kill from ASM) - just basic unsigned
- nicer ? message from interpreter "[" as already have for colon compiler
- memv: verbose mem info
- concat *.f in sep make stage, have file list allowing comments - just one incbin
- load embedded text at high mem address. requires small rejig to boot loader. much more space available now!
- fix over-type & over-delete hang-bug in keyboard buffer
- fix double-echo-after-buffer bug
- rename predefined -> standard
- move non-numeric standard words earlier in boot sequence
- avoid repeat/hide standard words in later files
- refactor builtin words to be in forthy style where possible (and thus candidates for .f)
- WIP move from ASM / implement afresh, words like: char [char] [compile] create variable constant ' [']
- move def of constant: to boot
- stage 0 compiler: change form ]..[ to {..}
- kill transient deprecated_word_buffer -- just use here
- kill kernel hex output code in favour of new Forth def
- make . be hex/decimal modal (with words hex decimal to switch)
- write up more info in new.md
- decide NO - state aware combined interpreter/colon-compiler
- NO: check return under/stack overflow
- support "else"
- factor ahead>  and <mark for then/else
- tidy up colon.f

Next:

- hex converion on input
- module" end-module
- support: create, use for variable (constant will be it's own def still)
- do/loop -- make F example work using original code

- finish/merge write up in nex.text into README
- add stack effect comment to all kernel words

- can we move entry: call: tail: to boot?
- alt tail imps. currenly compile branch. try "jump," or "jump (xt -- )" builtin word (like execute)
- cleanup 10/13 cr code in kernel

- primordal mode (-1), access to fixed array of single-char words
- allowing bootstrap def of word/find

- support nested parens in comments
- "quit" - clear return stack and restart interpreter loop
- "abort" - clear param stack and call quit
- signed printing & numeric conversion ?
- smart print that can see if numbers are XT addresses

- postpone ???
- does> ???

- run for real. not in qemu
- port everything to 6502. bbc or own-6502-computer

- stretch: continue BBC meteors game
- stretch: static type checker (in Haskell)

- macros/defs in prep to explore threaded interpreter
- threaded interpreter: direct or indirect?
