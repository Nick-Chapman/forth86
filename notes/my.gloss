
----------------------------------------------------------------------
Forth (core extended)

.s                              ( )                     : show stack (non destructively)
nip                             ( a b -- b )            : drop item below stck top
see                             ( "name" )              : decompile a definition
words                           ( )                     : list words in dictionary

----------------------------------------------------------------------

My current non-standard words:

.h                              ( b )                   : emit byte as 2-digit hex
.hh                             ( a -- )                : emit 16bit number as 4digit hex
0branch [LIT:xt]                ( )                     : branch if top of stack is non-zero
0branch,                        ( xt -- )               : write code to call 0branch
@rel->abs                       ( a -- xt )             : get XT from x86 relative call payload
another-entry?                  ( xt1 -- bool )         : walk dictionary
tail                            ( "name" -- )           : tail-call (i.e jump!) to a word
branch [LIT:xt]                 ( )                     : unconditional branch
crash                           ( )                     : obv
crash-only-during-startup       ( )                     : obv
entry,                          ( str --)               : write dict header at here.
echo-enabled                    ( -- a )                : address of flag to control echo
echo-off                        ( )                     : obv
echo-on                         ( )                     : obv
immediate^                      ( xt -- )               : used by (standard word) immediate
get-key                         ( -- xt )               : for current impl of "key"
here-pointer                    ( -- a )                : variable containing here
latest-entry                    ( -- xt )               : added to dictionary
lit [LIT:n]                     ( -- x )                : internal for compilation
mem                             ( )                     : report #bytes available
next-entry                      ( xt1 -- xt2 )          : walk dictionary
number?                         ( str -- n 1|str 0 )    : test if a string represents a number
safe-find                       ( )                     : KILL
set-key                         ( xt -- )               : replace imp for "key"
sp                              ( -- a )                : param stack pointer
sp0                             ( -- a )                : base of stack
startup-is-complete             ( )                     : notify startup is complete
strlen                          ( str -- n )            : obv
immediate?                      ( xt -- bool )          : is this XT an immediate word?
hidden?                         ( xt -- bool )          : is this XT hidden?
xt->name                        ( xt -- string )        : name of dictionary entry
